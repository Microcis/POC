import { GraphQLError } from 'graphql';

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

const maxAliasesDefaultOptions = {
  n: 15,
  onAccept: [],
  onReject: [],
  propagateOnRejection: true
};

class MaxAliasesVisitor {
  constructor(context, options) {
    _defineProperty(this, "OperationDefinition", void 0);

    _defineProperty(this, "context", void 0);

    _defineProperty(this, "config", void 0);

    this.context = context;
    this.config = Object.assign({}, maxAliasesDefaultOptions, ...Object.entries(options !== null && options !== void 0 ? options : {}).map(([k, v]) => v === undefined ? {} : {
      [k]: v
    }));
    this.OperationDefinition = {
      enter: this.onOperationDefinitionEnter
    };
  }

  onOperationDefinitionEnter(operation) {
    const aliases = this.countAliases(operation);

    if (aliases > this.config.n) {
      const err = new GraphQLError(`Syntax Error: Aliases limit of ${this.config.n} exceeded, found ${aliases}.`);

      for (const handler of this.config.onReject) {
        handler(this.context, err);
      }

      if (this.config.propagateOnRejection) {
        throw err;
      }
    } else {
      for (const handler of this.config.onAccept) {
        handler(this.context, {
          n: aliases
        });
      }
    }
  }

  countAliases(node) {
    let aliases = 0;

    if ('alias' in node && node.alias) {
      ++aliases;
    }

    if ('selectionSet' in node && node.selectionSet) {
      for (let child of node.selectionSet.selections) {
        aliases += this.countAliases(child);
      }
    } else if (node.kind === 'FragmentSpread') {
      const fragment = this.context.getFragment(node.name.value);

      if (fragment) {
        aliases += this.countAliases(fragment);
      }
    }

    return aliases;
  }

}

const maxAliasesRule = options => context => new MaxAliasesVisitor(context, options);

const maxAliasesPlugin = options => {
  return {
    onValidate({
      addValidationRule
    }) {
      addValidationRule(maxAliasesRule(options));
    }

  };
};

export { maxAliasesPlugin, maxAliasesRule };
