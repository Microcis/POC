import { GraphQLError, Kind } from 'graphql';

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

const maxDirectivesDefaultOptions = {
  n: 50,
  onAccept: [],
  onReject: [],
  propagateOnRejection: true
};

class MaxDirectivesVisitor {
  constructor(context, options) {
    _defineProperty(this, "OperationDefinition", void 0);

    _defineProperty(this, "context", void 0);

    _defineProperty(this, "config", void 0);

    this.context = context;
    this.config = Object.assign({}, maxDirectivesDefaultOptions, ...Object.entries(options !== null && options !== void 0 ? options : {}).map(([k, v]) => v === undefined ? {} : {
      [k]: v
    }));
    this.OperationDefinition = {
      enter: this.onOperationDefinitionEnter
    };
  }

  onOperationDefinitionEnter(operation) {
    const directives = this.countDirectives(operation);

    if (directives > this.config.n) {
      const err = new GraphQLError(`Syntax Error: Directives limit of ${this.config.n} exceeded, found ${directives}.`);

      for (const handler of this.config.onReject) {
        handler(this.context, err);
      }

      if (this.config.propagateOnRejection) {
        throw err;
      }
    } else {
      for (const handler of this.config.onAccept) {
        handler(this.context, {
          n: directives
        });
      }
    }
  }

  countDirectives(node) {
    let directives = 0;

    if (node.directives) {
      directives += node.directives.length;
    }

    if ('selectionSet' in node && node.selectionSet) {
      for (let child of node.selectionSet.selections) {
        directives += this.countDirectives(child);
      }
    } else if (node.kind == Kind.FRAGMENT_SPREAD) {
      const fragment = this.context.getFragment(node.name.value);

      if (fragment) {
        directives += this.countDirectives(fragment);
      }
    }

    return directives;
  }

}

const maxDirectivesRule = options => context => new MaxDirectivesVisitor(context, options);
const maxDirectivesPlugin = options => {
  return {
    onValidate({
      addValidationRule
    }) {
      addValidationRule(maxDirectivesRule(options));
    }

  };
};

export { maxDirectivesDefaultOptions, maxDirectivesPlugin, maxDirectivesRule };
